///*------------------------------------*\
//    #FUNCTIONS
//\*------------------------------------*/

// fortitude makes use of a few functions that are also available for you to use
// later on in your extension of the framework.

// Maths helpers.
//
// Halve and double numbers, returning rounded integers. E.g.:
//
// .foo {
//     padding: fortitude-halve(3.2px);
// }
//

@function fortitude-tint($color, $percent){
  @return mix(white, $color, $percent);
}

@function fortitude-shade($color, $percent){
  @return mix(black, $color, $percent);
}

@function fortitude-quarter($value) {
  @return $value / 4;
}

@function fortitude-halve($value) {
  @return $value / 2;
}

@function fortitude-double($value) {
  @return $value * 2;
}

@function fortitude-quadruple($value) {
  @return $value * 4;
}

@function fortitude-contains($list, $value) {
  @return (false == index($list, $value));
}

@function fortitude-strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@function fortitude-pow ($x, $n) {
  $value: 1;

  @if $n >= 0 {
    @for $i from 1 through $n {
      $value: $value * $x;
    }
  } @else {
    @for $i from $n to 0 {
      $value: $value / $x;
    }
  }

  @return $value;
}

@function fortitude-strip-unit-if-zero($value) {
  @return if(fortitude-strip-unit($value) == 0, 0, $value);
}

@function fortitude-px-to-rem($value, $conversion-unit: 0.1rem) {
  @return fortitude-strip-unit($value) * $conversion-unit;
}

@function fortitude-rem-to-px($value, $conversion-unit: 10px) {
  @return fortitude-strip-unit($value) * $conversion-unit;
}

@function fortitude-font-scale($unit, $ratio: $fortitude-base-font-ratio, $font-size: $fortitude-base-font-size) {
  @return fortitude-pow($ratio, $unit) * $font-size;
}

@function fortitude-component-spacing-unit-height($component-height, $component-spacing-unit: $fortitude-base-spacing-unit) {
  $value: ceil($component-height / $component-spacing-unit) * $component-spacing-unit;
  @return fortitude-strip-unit-if-zero($value);
}

@function fortitude-component-spacing-unit-delta($component-height, $component-spacing-unit: $fortitude-base-spacing-unit) {
  $component-spacing-unit-height: fortitude-component-spacing-unit-height($component-height, $component-spacing-unit);
  $value: fortitude-halve($component-spacing-unit-height - $component-height);
  @return fortitude-strip-unit-if-zero($value);
}

@function fortitude-component-negitive-padding($component-height, $component-border-width: 0rem, $component-spacing-unit: $fortitude-base-spacing-unit) {
  $value: fortitude-halve($component-height - $component-spacing-unit - fortitude-double($component-border-width));
  @return fortitude-strip-unit-if-zero($value);
}

@function fortitude-component-margin($component-height, $component-border-width: 0rem, $component-spacing-unit: $fortitude-base-spacing-unit) {
  $component-spacing-unit-height: fortitude-component-spacing-unit-height($component-height, $component-spacing-unit);
  $value: fortitude-halve($component-spacing-unit-height - $component-height);

  @if $value < 0 {
    $value: fortitude-component-negitive-padding($component-height, $component-border-width, $component-spacing-unit) + fortitude-component-spacing-unit-delta($component-height, $component-spacing-unit);
  }

  @return fortitude-strip-unit-if-zero($value);
}

@function fortitude-component-padding($component-height, $component-border-width: 0rem, $component-line-height: $fortitude-base-line-height) {
  $value: fortitude-halve($component-height - $component-line-height - fortitude-double($component-border-width));

  @if $value < 0 {
    $value: 0;
  }

  @return fortitude-strip-unit-if-zero($value);
}

@function fortitude-map-to-query($map) {
  $query: "";
  @for $index from 1 through length($map) {
    $query-part: "(#{nth(nth($map, $index), 1)}:#{nth(nth($map, $index), 2)})";
    @if $index != length($map) {
      $query-part: str-insert($query-part, " and ", str-length($query-part) + 1);
    }
    $query: str-insert($query, $query-part, str-length($query) + 1);
  }
  @return $query;
}

@function fortitude-query($object) {
  @if type-of($object) == map {
    @return fortitude-map-to-query($object);
  } @else if type-of($object) == number {
    @return fortitude-map-to-query((min-width: $object));
  } @else {
    @return null;
  }
}
